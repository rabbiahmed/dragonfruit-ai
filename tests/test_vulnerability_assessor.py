# tests/test_vulnerability_assessor.py

import unittest
import os
import time
from utils.vulnerability_assessor import (
    detect_antivirus,
    detect_vpn,
    detect_firewall,
    system_vulnerability_check,
    check_security_services
)


class TestVulnerabilityAssessor(unittest.TestCase):

    def test_detect_antivirus(self):
        result = detect_antivirus()
        self.assertIn(result, ["Active", "Not Detected", "Unknown"], f"Unexpected AV status: {result}")

    def test_detect_vpn(self):
        result = detect_vpn()
        self.assertIn(result, ["Connected", "Disconnected", "Unknown"], f"Unexpected VPN status: {result}")

    def test_detect_firewall(self):
        result = detect_firewall()
        self.assertIn(result, ["Active", "Inactive", "Unknown"], f"Unexpected firewall status: {result}")

    def test_check_security_services_structure(self):
        deductions, report, suggestions = check_security_services()
        self.assertIsInstance(deductions, int)
        self.assertIsInstance(report, dict)
        self.assertIsInstance(suggestions, list)

    def test_system_vulnerability_check_returns_valid_data(self):
        score, report, suggestions, json_path = system_vulnerability_check()

        self.assertIsInstance(score, int)
        self.assertGreaterEqual(score, 0)
        self.assertLessEqual(score, 100)

        self.assertIsInstance(report, dict)
        self.assertIsInstance(suggestions, list)
        self.assertTrue(json_path.endswith(".json"))
        self.assertTrue(os.path.exists(json_path), f"JSON report not found: {json_path}")

        # Clean up test report file
        os.remove(json_path)

    def test_system_vulnerability_check_performance(self):
        start = time.time()
        _, _, _, _ = system_vulnerability_check()
        duration = time.time() - start
        self.assertLess(duration, 5, f"system_vulnerability_check took too long: {duration:.2f}s")


if __name__ == '__main__':
    unittest.main()
