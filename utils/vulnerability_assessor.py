# utils/vulnerability_assessor.py

import json
import shutil
import logging
import platform
import subprocess
from datetime import datetime
from utils.system_metrics import get_system_metrics
from utils.security_commands import run_security_command
from utils.network_watchdog import get_active_ip_connections, get_connected_devices


def detect_antivirus():
    known_av_processes = {
        "clamav": ["clamd", "freshclam"],
        "avg": ["avgd"],
        "avast": ["avast"],
        "comodo": ["cmdagent"],
        "sophos": ["savd", "sophos"],
        "bitdefender": ["bdscan", "bdservicehost"],
        "f-prot": ["fpscand"]
    }

    try:
        ps_output = subprocess.check_output(
            ["ps", "aux"], stderr=subprocess.STDOUT, text=True, timeout=5
        ).lower()

        for av_name, processes in known_av_processes.items():
            if any(proc in ps_output for proc in processes):
                return "Active"
        return "Not Detected"

    except (subprocess.CalledProcessError, subprocess.TimeoutExpired, FileNotFoundError) as e:
        logging.warning(f"Antivirus detection failed: {e}")
        return "Unknown"


def detect_vpn():
    try:
        ps_output = subprocess.check_output(
            ["ifconfig"], stderr=subprocess.STDOUT, text=True, timeout=5
        ).lower()

        # Look for tunX or tapX interfaces which are commonly used by VPNs
        if any(line.strip().startswith(("tun", "tap")) for line in ps_output.splitlines()):
            return "Connected"
        return "Disconnected"

    except (subprocess.CalledProcessError, subprocess.TimeoutExpired, FileNotFoundError) as e:
        logging.warning(f"VPN detection failed: {e}")
        return "Unknown"


def detect_linux_firewall():
    # Try UFW first
    if shutil.which("ufw"):
        try:
            output = subprocess.check_output(
                ["ufw", "status"],
                stderr=subprocess.STDOUT,
                text=True,
                timeout=3
            ).lower()

            if "status: active" in output:
                return "Active (ufw)"
            elif "status: inactive" in output:
                return "Inactive (ufw)"
            else:
                logging.warning(f"UFW output unclear: {output}")
        except subprocess.CalledProcessError as e:
            if "permission denied" in e.output.lower():
                return "Permission Denied (root required for ufw)"
            elif "inactive" in e.output.lower():
                return "Inactive (ufw)"
            else:
                logging.warning(f"UFW check failed: {e.output.strip()}")
        except Exception as e:
            logging.warning(f"UFW check error: {e}")

    # Fallback: Try iptables
    if shutil.which("iptables"):
        try:
            output = subprocess.check_output(
                ["iptables", "-L"],
                stderr=subprocess.STDOUT,
                text=True,
                timeout=3
            )

            if "Chain" in output and len(output.strip().splitlines()) > 2:
                return "Active (iptables)"
            else:
                return "Inactive (iptables)"
        except subprocess.CalledProcessError as e:
            if "permission denied" in e.output.lower():
                return "Permission Denied (root required for iptables)"
            logging.warning(f"iptables error: {e.output.strip()}")
        except Exception as e:
            logging.warning(f"iptables check error: {e}")

    return "Firewall Status Unavailable"


def detect_macos_firewall():
    try:
        output = subprocess.check_output(
            ["/usr/libexec/ApplicationFirewall/socketfilterfw", "--getglobalstate"],
            stderr=subprocess.STDOUT,
            text=True,
            timeout=5
        )
        output_lower = output.lower()
        if "enabled" in output_lower:
            return "Active (macOS Firewall)"
        elif "disabled" in output_lower:
            return "Inactive (macOS Firewall)"
    except subprocess.CalledProcessError as e:
        if "permission denied" in str(e).lower():
            return "Permission Denied (admin required for macOS Firewall)"
        logging.warning(f"macOS firewall command error: {e}")
    except Exception as e:
        logging.warning(f"macOS firewall detection failed: {e}")
    return "Firewall Status Unavailable"


def detect_windows_firewall():
    try:
        cmd = [
            "powershell",
            "-Command",
            "(Get-NetFirewallProfile | Select-Object -ExpandProperty Enabled)"
        ]
        result = subprocess.check_output(cmd, stderr=subprocess.STDOUT, text=True, timeout=5)
        result_clean = result.strip().lower()

        if "true" in result_clean:
            return "Active (Windows Firewall)"
        elif "false" in result_clean:
            return "Inactive (Windows Firewall)"
    except subprocess.CalledProcessError as e:
        if "access is denied" in str(e).lower():
            return "Permission Denied (admin required for Windows Firewall)"
        logging.warning(f"Windows firewall command error: {e.output.strip()}")
    except Exception as e:
        logging.warning(f"Windows firewall detection failed: {e}")
    return "Firewall Status Unavailable"


def detect_firewall():
    os_name = platform.system().lower()

    if os_name == "linux":
        return detect_linux_firewall()
    elif os_name == "windows":
        return detect_windows_firewall()
    elif os_name == "darwin":
        return detect_macos_firewall()
    else:
        logging.warning(f"Unsupported OS for firewall detection: {os_name}")
        return "Unsupported OS"


def check_security_services():
    report = {}
    deductions = 0
    suggestions = []

    antivirus = detect_antivirus()
    report["Antivirus Status"] = antivirus
    if antivirus != "Active":
        deductions += 10
        suggestions.append("No active antivirus detected. Install and enable antivirus software.")

    vpn = detect_vpn()
    report["VPN Status"] = vpn
    if vpn != "Connected":
        deductions += 5
        suggestions.append("VPN is not active. Consider using a VPN for secure browsing, especially on public networks.")

    firewall = detect_firewall()
    report["Firewall Status"] = firewall
    if firewall != "Active":
        deductions += 10
        suggestions.append("Firewall is not active. Enable it to protect against unauthorized access.")

    return deductions, report, suggestions


def system_vulnerability_check():
    score = 100
    report = {}
    suggestions = []

    # 1. System Metrics
    metrics = get_system_metrics()
    cpu = metrics.get("cpu", 0)
    memory = metrics.get("memory", 0)
    disk = metrics.get("disk", 0)

    if cpu > 85:
        score -= 10
        suggestions.append("High CPU usage detected. Close unused applications or investigate heavy processes.")
    if memory > 85:
        score -= 10
        suggestions.append("High memory usage detected. Consider optimizing apps or upgrading RAM.")
    if disk > 90:
        score -= 10
        suggestions.append("Disk is almost full. Clean up unused files or expand storage.")

    report["CPU Usage"] = f"{cpu}%"
    report["Memory Usage"] = f"{memory}%"
    report["Disk Usage"] = f"{disk}%"

    # 2. Open Ports
    open_ports_output = run_security_command("open_ports")
    open_port_count = open_ports_output.strip().count("\n") + 1 if open_ports_output.strip() else 0
    if open_port_count > 5:
        score -= 15
        suggestions.append("Too many open ports. Disable unnecessary services and firewall unused ports.")
    report["Open Ports"] = f"{open_port_count} detected"

    # 3. Logged-in Users
    users = run_security_command("current_user").strip()
    if "root" in users.lower():
        score -= 5
        suggestions.append("Root user session detected. Avoid using root for regular operations.")
    report["Logged-in Users"] = users

    # 4. Active IP Connections
    connections = get_active_ip_connections()
    connection_count = len(connections)
    unknown_conns = [c for c in connections if c["Process"] == "N/A" or "127.0.0.1" not in c.get("Remote Address", "")]

    if connection_count > 10:
        score -= 10
        suggestions.append(f"{connection_count} active IP connections. Review services and external communications.")

    if unknown_conns:
        score -= 10
        suggestions.append(f"{len(unknown_conns)} unknown connections found. Investigate for unauthorized access.")

    report["Active IP Connections"] = f"{connection_count} total, {len(unknown_conns)} unknown"

    # 5. Connected Devices
    connected_devices = get_connected_devices()
    valid_devices = [d for d in connected_devices if "Error" not in d]
    device_count = len(valid_devices)

    if device_count > 10:
        score -= 10
        suggestions.append(f"{device_count} devices found on the network. Check for unauthorized systems.")

    report["Connected Devices"] = f"{device_count} total"

    # 6. Security Services
    deductions, service_report, service_suggestions = check_security_services()
    score -= deductions
    report.update(service_report)
    suggestions.extend(service_suggestions)

    # Clamp score between 0 and 100
    score = max(0, min(score, 100))

    # Save JSON report with timestamp
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    json_path = f"vulnerability_report_{timestamp}.json"

    export_data = {
        "score": score,
        "report": report,
        "suggestions": suggestions,
        "timestamp": timestamp,
    }

    try:
        with open(json_path, "w") as f:
            json.dump(export_data, f, indent=4)
    except Exception as e:
        print(f"Failed to save JSON report: {e}")

    return score, report, suggestions, json_path

